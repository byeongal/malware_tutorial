import pefile

import os
import math
from collections import Counter

def get_entropy(data):
    if not data:
        return 0.0
    occurences = Counter(bytearray(data))
    entropy = 0
    for x in occurences.values():
        p_x = float(x) / len(data)
        entropy -= p_x * math.log(p_x, 2)
    return entropy

# AhnLab-V3 : Trojan/Win32.WannaCryptor.R200571
# ALYac : Trojan.Ransom.WannaCryptor
file_path = r"./samples/84c82835a5d21bbcf75a61706d8ab549.vir"

pe = pefile.PE(file_path)
res_array = []
if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
    for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
        if resource_type.name is not None:
            name = "%s" % resource_type.name
        else:
            name = "%s" % pefile.RESOURCE_TYPE.get(resource_type.struct.Id)
        if name == None:
            name = "%d" % resource_type.struct.Id
        if hasattr(resource_type, 'directory'):
            for resource_id in resource_type.directory.entries:
                if hasattr(resource_id, 'directory'):
                    for resource_lang in resource_id.directory.entries:
                        raw_data = pe.get_data(resource_lang.data.struct.OffsetToData,
                                                    resource_lang.data.struct.Size)
                        with open('./samples/pk.zip','wb') as f:
                            f.write(raw_data)
                        exit(1)
                        ent = get_entropy(raw_data)
                        hex_raw_data = [format(i, '02X') for i in raw_data]
                        lang = pefile.LANG.get(resource_lang.data.lang, '*unknown*')
                        sublang = pefile.get_sublang_name_for_lang(resource_lang.data.lang, resource_lang.data.sublang)
                        file_ratio = len(raw_data) / os.path.getsize(file_path)
                        res_array.append({"name": name, "offset": resource_lang.data.struct.OffsetToData,
                                          "size": resource_lang.data.struct.Size, "entropy": ent,
                                          "file-ratio" : file_ratio, "language": lang,
                                          'first-bytes-hex' : ' '.join(hex_raw_data[:16]),
                                          'first-bytes-text' : str(raw_data[:16]),
                                          })
for res in res_array:
    print('Name : {}'.format(res['name']))
    print('file-offset : 0x{:08X}'.format(res['offset']))
    print('size : {}'.format(res['size']))
    print('file-ratio : {:.2f} %'.format(res['file-ratio'] * 100))
    print('entropy : {:.3f} %'.format(res['entropy']))
    print('language : {}'.format(res['language']))
    print('first-bytes-hex : {}'.format(res['first-bytes-hex']))
    print('first-bytes-text : {}'.format(res['first-bytes-text']))
    print()
