import pefile

OPTIONAL_HEADER_MAGICS = {
    0x10B : 'IMAGE_NT_OPTIONAL_HDR32_MAGIC',
    0x20B : 'IMAGE_NT_OPTIONAL_HDR64_MAGIC',
    0x107 : 'IMAGE_ROM_OPTIONAL_HDR_MAGIC',
}

# AhnLab-V3 : Trojan/Win32.WannaCryptor.R200571
# ALYac : Trojan.Ransom.WannaCryptor
file_path = r"./samples/84c82835a5d21bbcf75a61706d8ab549.vir"

pe = pefile.PE(file_path)

print('Magic : 0x{:04X}({})'.format(pe.OPTIONAL_HEADER.Magic, OPTIONAL_HEADER_MAGICS[pe.OPTIONAL_HEADER.Magic]))
print('Major Linker Version : 0x{:02X}'.format(pe.OPTIONAL_HEADER.MajorLinkerVersion))
print('Minor Linker Version : 0x{:02X}'.format(pe.OPTIONAL_HEADER.MinorLinkerVersion))
print('Size of Code : 0x{:08X}'.format(pe.OPTIONAL_HEADER.SizeOfCode))
print('Size of Initialized Data : 0x{:08X}'.format(pe.OPTIONAL_HEADER.SizeOfInitializedData))
print('Size of Uninitialized Data : 0x{:08X}'.format(pe.OPTIONAL_HEADER.SizeOfUninitializedData))
print('Address Of Entry Point : 0x{:08X}'.format(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
print('Base of Code : 0x{:08X}'.format(pe.OPTIONAL_HEADER.BaseOfCode))
print('Base of Data : 0x{:08X}'.format(pe.OPTIONAL_HEADER.BaseOfData))


print('Image Base : 0x{:08X}'.format(pe.OPTIONAL_HEADER.ImageBase))
print('Section Alignment : 0x{:08X}'.format(pe.OPTIONAL_HEADER.SectionAlignment))
print('File Alignment : 0x{:08X}'.format(pe.OPTIONAL_HEADER.FileAlignment))
print('Major O/S Version : 0x{:04X}'.format(pe.OPTIONAL_HEADER.MajorOperatingSystemVersion))
print('Minor O/S Version : 0x{:04X}'.format(pe.OPTIONAL_HEADER.MinorOperatingSystemVersion))
print('Major Subsystem Version : 0x{:04X}'.format(pe.OPTIONAL_HEADER.MajorSubsystemVersion))
print('Minor Subsystem Version : 0x{:04X}'.format(pe.OPTIONAL_HEADER.MinorSubsystemVersion))
print('Win32 Verstion Value : 0x{:08X}'.format(pe.OPTIONAL_HEADER.Reserved1))
print('Size of Image : 0x{:08X}'.format(pe.OPTIONAL_HEADER.SizeOfImage))
print('Size of Headers : 0x{:08X}'.format(pe.OPTIONAL_HEADER.SizeOfHeaders))
print('Checksum : 0x{:08X}'.format(pe.OPTIONAL_HEADER.CheckSum))
print('Subsystem : 0x{:04X}({})'.format(pe.OPTIONAL_HEADER.Subsystem, pefile.SUBSYSTEM_TYPE[pe.OPTIONAL_HEADER.Subsystem]))
print('Dll Characteristics : 0x{:04X}'.format(pe.OPTIONAL_HEADER.DllCharacteristics))
for value, description in pefile.dll_characteristics:
    if pe.OPTIONAL_HEADER.DllCharacteristics & description == description:
        print('- 0x{:04X}\t{}'.format(description, value))
print('Size of Stack Reserve : 0x{:08X}'.format(pe.OPTIONAL_HEADER.SizeOfStackReserve))
print('Size of Stack Commit : 0x{:08X}'.format(pe.OPTIONAL_HEADER.SizeOfStackCommit))
print('Size of Heap Reserve : 0x{:08X}'.format(pe.OPTIONAL_HEADER.SizeOfHeapReserve))
print('Size of Heap Commit : 0x{:08X}'.format(pe.OPTIONAL_HEADER.SizeOfHeapCommit))
print('Loader Flags : 0x{:08X}'.format(pe.OPTIONAL_HEADER.LoaderFlags))
print('Nuber of Data Directories : 0x{:08X}'.format(pe.OPTIONAL_HEADER.NumberOfRvaAndSizes))